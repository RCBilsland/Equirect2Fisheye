name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install OBS Studio
      run: |
        brew install cmake
        brew install pkg-config
        # Install OBS Studio from cask (application)
        brew install --cask obs
        # Try to find OBS development headers
        if [ -d "/Applications/OBS.app/Contents/Resources/include" ]; then
          echo "OBS headers found in app bundle"
          export OBS_INCLUDE_PATH="/Applications/OBS.app/Contents/Resources/include"
        elif [ -d "/opt/homebrew/include/obs" ]; then
          echo "OBS headers found in homebrew"
          export OBS_INCLUDE_PATH="/opt/homebrew/include/obs"
        else
          echo "OBS headers not found, will use fallback approach"
        fi
        
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        # Use metal-only configuration (no OBS dependencies)
        echo "Using metal-only configuration (Metal shader compilation)"
        cp ../CMakeLists-metal-only.txt CMakeLists.txt
        cp ../equirectangular_to_fisheye.metal .
        cmake .. -DCMAKE_BUILD_TYPE=Release
        
    - name: Build
      run: |
        cd build
        make -j$(sysctl -n hw.ncpu)
        
    - name: Code Sign Plugin
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      run: |
        # Create a temporary keychain for code signing
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        
        # Import the certificate (you'll need to add your certificate as a secret)
        echo "${{ secrets.CERTIFICATE_P12 }}" | base64 --decode > certificate.p12
        security import certificate.p12 -k build.keychain -P "${{ secrets.CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
        
        # Set keychain settings
        security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        
        # Code sign the plugin bundle
        cd build
        codesign --force --sign "${{ secrets.CERTIFICATE_NAME }}" --timestamp --options runtime obs-metal-fisheye-filter.plugin
        
    - name: Create Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/obs-metal-fisheye-filter.plugin
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload Artifacts
      if: github.event_name == 'workflow_dispatch'
      uses: actions/upload-artifact@v4
      with:
        name: obs-metal-fisheye-filter-plugin
        path: build/obs-metal-fisheye-filter.plugin
